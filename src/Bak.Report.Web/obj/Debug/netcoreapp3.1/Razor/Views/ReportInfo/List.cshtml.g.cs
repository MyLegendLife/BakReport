#pragma checksum "D:\Projects\BakReport\src\Bak.Report.Web\Views\ReportInfo\List.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b2e450ac4cc374ff44efa5e84e03a4e77e2ce1fd"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ReportInfo_List), @"mvc.1.0.view", @"/Views/ReportInfo/List.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Projects\BakReport\src\Bak.Report.Web\Views\_ViewImports.cshtml"
using Bak.Report.Web.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\BakReport\src\Bak.Report.Web\Views\_ViewImports.cshtml"
using Bak.Report.Application.Contracts.Reports;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Projects\BakReport\src\Bak.Report.Web\Views\ReportInfo\List.cshtml"
using Volo.Abp.Application.Dtos;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b2e450ac4cc374ff44efa5e84e03a4e77e2ce1fd", @"/Views/ReportInfo/List.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b6abdc9c48bc1cf4e5916c940a0753855ac02b50", @"/Views/_ViewImports.cshtml")]
    public class Views_ReportInfo_List : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<PagedResultDto<ReportInfoDto>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\Projects\BakReport\src\Bak.Report.Web\Views\ReportInfo\List.cshtml"
  
    ViewData["Title"] = "报表管理";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<fieldset class=""layui-elem-field layui-field-title"" style=""margin-top: 50px;"">
    <legend>报表管理</legend>
</fieldset>
<button type=""button"" class=""layui-btn layui-btn-lg layui-btn-normal"" id=""add"" style=""margin-left:20px;"">添加</button>
<table id=""table"" lay-filter=""test""></table>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        layui.use('table',
            function () {
                var table = layui.table;

                //第一个实例
                table.render({
                    elem: '#table',
                    id:'table1',
                    height: 600,
                    url: 'List', //数据接口
                    method: 'post',
                    parseData: function (res) { //res 即为原始返回的数据
                        return {
                            ""code"": res.code, //解析接口状态
                            //""msg"": res.message, //解析提示文本
                            //""count"": res.result.totalCount, //解析数据长度
                            ""data"": res.result //解析数据列表
                        };
                    },
                    //page: true, //开启分页
                    cols: [
                        [//表头
                            { field: 'id', title: '编号', align: 'center',width: 100},
                            { field: 'categoryName', title: '类别', align: 'center', wi");
                WriteLiteral(@"dth: 150 },
                            { field: 'name', title: '名称', align: 'center', width: 200 },
                            { field: 'docUri', title: '文件', align: 'center', width: 250 },
                            //{ field: 'creationTime', title: '创建时间', align: 'center', width: 200 },
                            { field: 'introduction', title: '简介', align: 'center' },
                            { fixed: 'right', width: 150, align: 'center', toolbar: '#operBar' } //这里的toolbar值是模板元素的选择器
                        ]
                    ]
                });

                table.on('tool(test)',
                    function (obj) { //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter=""对应的值""
                        var data = obj.data; //获得当前行数据
                        var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
                        var tr = obj.tr; //获得当前行 tr 的 DOM 对象（如果有的话）
                        
                        if (layEvent === 'edit') { //查看
            ");
                WriteLiteral(@"                layer.open({
                                type: 2,
                                title: '编辑',
                                area: ['1000px', '90%'],
                                fixed: false, //不固定
                                content: 'Edit?id=' + data[""id""],
                                end: function () {
                                    table.reload('table1', {});
                                }
                            });
                        } else if (layEvent === 'delete') {
                            layer.confirm('确认删除吗？',
                                { icon: 3, title: '提示' },
                                function (index) {
                                    $.ajax({
                                        url: 'Delete',
                                        type: 'post',
                                        data: { ""Id"": data[""id""] },
                                        dataType: 'json',
                                 ");
                WriteLiteral(@"       success: function (res) {
                                            if (res.code == '0') {
                                                layer.msg('操作成功', { icon: 1, time: 2000 });
                                                table.reload('table1', {});
                                            }
                                            else {
                                                layer.msg(res.message, { icon: 2, time: 2000 });
                                            }
                                        },
                                        error: function () {
                                            layer.alert('服务器异常');
                                        }
                                    });
                                });
                        }
                    });
            });


        $('#add').on('click', function () {
            layer.open({
                type: 2,
                title: '添加',
              ");
                WriteLiteral(@"  area: ['1000px', '90%'],
                fixed: false, //不固定
                content: ['Add'],
                end: function () {
                    layui.table.reload('table1', {});
                }
            });
        });
    </script>

    <script type=""text/html"" id=""operBar"">
        <a class=""layui-btn layui-btn-xs"" lay-event=""edit"">编辑</a>
        <a class=""layui-btn layui-btn-xs"" lay-event=""delete"">删除</a>
    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PagedResultDto<ReportInfoDto>> Html { get; private set; }
    }
}
#pragma warning restore 1591
